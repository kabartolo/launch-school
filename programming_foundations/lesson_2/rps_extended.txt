# 101 Lesson 2: RPS (20 March 2017)
# Assignment: Rock Paper Scissors: Bonus Features

# NOTES: 
1. In an effort to compartmentalize my methods, I pass around a lot of arguments, but at one point I had a method like winner(choice1, choice2, player1, player2, outcome_table) that returned the winner. My instinct said that was too many arguments for one method. I ended up removing the winner method and putting its logic back into the main game logic. I feel like I'm overthinking this and missing the simple solution.

2. I originally had get_user_name and get_user_choice but Rubocop complained about using the "get" prefix in reader method names. I changed my method names anyway, but is this really a Ruby convention? The Ruby docs on this issue seem to be referring to class accessors (https://github.com/bbatsov/ruby-style-guide#accessor_mutator_method_names), and Rubocop did not complain on get_apr and get_info in my mortgage calculator. Just a bit confused as to what's going on here.

input: 
  - number that maps to string choice

output:
  - string

rules:
  one point for each win: 
  - rock beats scissors and lizard
  - scissors beats paper and lizard
  - paper beats rock and spock
  - lizard beats paper and spock
  - spock beats rock and scissors

  - game winner is first to 5 points

algorithms:
  - given table "choices" that maps each choice to the 2 choices it can beat
  - win?(first choice, second choice)
    - if first choice in choices && second choice in choices[first choice]
        - return true
      else
        - return false

abstraction:
- get choice as letter from user
- get full choice from valid choices table
- get random choice from choices table => computer choice
- check outcome table to get winner
- print results and score
- continue until one player gets 5 points
- game over, ask if user wants to play again

pseudeocode:
START

SET outcome_table mapping each choice to the choices it beats
SET valid_choices table mapping a letter input by the user to a valid choice
SET player1 and player2 for user and computer
SET score table, SET score to 0 for each player

LOOP
  LOOP
    SET user choice = ''
    WHILE user choice == ''
      GET user choice
      IF user choice is valid
        break
      ELSE
        user choice = ''

    SET computer choice to random item in valid choices table

    SET winner = get_winner(user_choice, computer_choice)
    UPDATE score
    PRINT result
    PRINT score

    IF winner score == 5
      declare winner
      break
  END LOOP

  GET user decision to play again
  IF decision == 'n'
    break

END



