# 101 Lesson 6: Tic Tac Toe Problem Decomposition (27 March 2017)

Tic Tac Toe is a 2 player game played on a 3x3 board. Each player takes a turn and
marks a square on the board. First player to reach 3 squares in a row, including diagonals,
wins. If all 9 squares are marked and no player has 3 squares in a row, then the game is a tie.

Game sequence:
1. Display the initial empty 3x3 board.
2. Ask the user to mark a square.
3. Computer marks a square.
4. Display the updated board state.
5. If winner, display winner.
6. If board is full, display tie.
7. If neither winner nor board is full, go to #2.
8. Play again?
9. If yes, go to #1.
10. Good bye!

        (Start)
           |
---------> O <----------------------------------[Reset Board]
|          |                                           |
|    [Display board]                                   |
|          |                                           |  
|    [User marks square]                               |   
|          |                                           |
|    [Computer marks square]                           |   
|          |                                          Yes 
|        /   \                                         |
|       Winner? --Yes---> /Display winner/ ----        |
|        \   /                                |        |
|          |                                  |   /         \
|          No                                 |--> play again?
|          |                                  |   \         /
|        /   \                                |        |
<-No-- Board full? --Yes--> /Display tie/ -----        No
         \   /                                         |
                                                     (Stop) 

Board display:
- 3x3 grid of squares
- Each square has 'X' or 'O' or is blank
- Each square is numbered (1 to 9)
- There is a hash representing board state
  - { 1 => ' ', 2 => 'X', 3 => 'O', 4 => ' ' ... }
- The display method reads the board state
- The mark method changes the board state

Variables:
board (hash)
BLANK_MARKER
PLAYER_MARKER
COMPUTER_MARKER

Methods:
display_board(board)
player_mark_board(board)
computer_mark_board(board)
empty_squares(board)
board_full?(board) -- checks empty_squares(board) empty?
winner?(board) 